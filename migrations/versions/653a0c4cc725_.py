"""empty message

Revision ID: 653a0c4cc725
Revises: beec27288c60
Create Date: 2024-05-22 14:14:37.704516

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '653a0c4cc725'
down_revision = 'beec27288c60'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('hability',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('effect', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.drop_constraint('role_hability_1_key', type_='unique')
        batch_op.drop_constraint('role_hability_2_key', type_='unique')
        batch_op.drop_constraint('role_hability_3_key', type_='unique')
        batch_op.drop_column('hability_3')
        batch_op.drop_column('hability_2')
        batch_op.drop_column('hability_1')

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.add_column(sa.Column('done', sa.Boolean(), nullable=False))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_column('done')

    with op.batch_alter_table('role', schema=None) as batch_op:
        batch_op.add_column(sa.Column('hability_1', sa.VARCHAR(length=120), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('hability_2', sa.VARCHAR(length=120), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('hability_3', sa.VARCHAR(length=120), autoincrement=False, nullable=False))
        batch_op.create_unique_constraint('role_hability_3_key', ['hability_3'])
        batch_op.create_unique_constraint('role_hability_2_key', ['hability_2'])
        batch_op.create_unique_constraint('role_hability_1_key', ['hability_1'])

    op.drop_table('hability')
    # ### end Alembic commands ###
